name: Deploy Staging ðŸš€

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-staging:
    name: Deploy to staging server
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_STG_PATH: ${{ vars.APP_STG_PATH }}
          GIT_URL: ${{ secrets.GIT_URL }}
          MINIO_STG_ENDPOINT: ${{ secrets.MINIO_STG_ENDPOINT }}
          MINIO_STG_ACCESS_KEY: ${{ secrets.MINIO_STG_ACCESS_KEY }}
          MINIO_STG_SECRET_KEY: ${{ secrets.MINIO_STG_SECRET_KEY }}
          APP_STG_PORT_1: ${{ secrets.APP_STG_PORT_1 }}
          APP_STG_PORT_2: ${{ secrets.APP_STG_PORT_2 }}
         
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_NAME_STAGING }}
          key: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
          envs: APP_STG_PATH,GIT_URL,MINIO_STG_ENDPOINT,MINIO_STG_ACCESS_KEY,MINIO_STG_SECRET_KEY,APP_STG_PORT_1,APP_STG_PORT_2
          script: |
            # Debug: Print non-sensitive environment variables
            echo "APP_STG_PATH: ${APP_STG_PATH}"
            echo "MINIO_STG_ENDPOINT: ${MINIO_STG_ENDPOINT}"
            echo "APP_STG_PORT_1: ${APP_STG_PORT_1}"
            echo "APP_STG_PORT_2: ${APP_STG_PORT_2}"

            if [[ -d "${APP_STG_PATH}" ]]; then 
              cd ${APP_STG_PATH}
              git config pull.rebase false
              sudo docker compose down
              git pull origin main
            else
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git clone $GIT_URL ${APP_STG_PATH}
              cd ${APP_STG_PATH}
            fi

            # If there are any envars update
            echo "APP_STG_PORT_1=${APP_STG_PORT_1}" > .env
            echo "APP_STG_PORT_2=${APP_STG_PORT_2}" >> .env
            echo "MINIO_STG_ENDPOINT=${MINIO_STG_ENDPOINT}" >> .env
            echo "MINIO_STG_ACCESS_KEY=${MINIO_STG_ACCESS_KEY}" >> .env
            echo "MINIO_STG_SECRET_KEY=${MINIO_STG_SECRET_KEY}" >> .env

            # Generate DH param if not exists
            if [ ! -f ./nginx/ssl/dhparam.pem ]; then
              sudo mkdir -p ./nginx/ssl
              sudo openssl dhparam -out ./nginx/ssl/dhparam.pem 2048
            fi

            # Start Nginx
            sudo docker compose up -d nginx
            echo "Waiting for Nginx to start..."
            sleep 30

            # Validate the existence and accessibility of the challenge directory
            sudo mkdir -p /var/www/certbot/.well-known/acme-challenge
            echo "test" | sudo tee /var/www/certbot/.well-known/acme-challenge/testfile
            curl http://stg.pac-app.online/.well-known/acme-challenge/testfile

            # Run Certbot
            sudo docker compose run --rm --entrypoint "\
              certbot certonly --webroot --webroot-path=/var/www/certbot \
              --email ibnu.fajar94@outlook.com \
              --agree-tos \
              --non-interactive \
              --no-eff-email \
              --force-renewal \
              -d stg.pac-app.online" certbot

            # Start other services
            sudo docker compose up -d --force-recreate --build pacmusic-stg-1 pacmusic-stg-2
            sudo docker compose up -d nginx

            # Check if services are running
            echo "Checking if services are running..."
            sudo docker compose ps

            # Check logs for any errors
            echo "Checking docker compose logs..."
            sudo docker compose logs --tail=50

      - name: Hit Endpoint
        run: |
          sleep 20
          curl -v ${{ secrets.STG_URL }}
